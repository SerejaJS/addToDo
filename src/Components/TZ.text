▎Техническое задание (ТЗ) для создания TODO List

▎Общая информация 

Создать простое приложение TODO List на React, которое позволит пользователям добавлять, удалять и отмечать задачи как выполненные.
 Приложение должно быть интуитивно понятным и иметь простой интерфейс.

▎Подзадачи

; 1. Настройка окружения

   ; • Установить Node.js и npm (если еще не установлены). ++++

   ; • Создать новое приложение React с помощью 

   ; • Создать компоненты:

   ;   • TodoApp — основной компонент приложения. 

   ;   • TodoList — компонент для отображения списка задач.

   ;   • TodoItem — компонент для отдельной задачи. 

   ;   • TodoForm — компонент для добавления новой задачи. 

2. Создание компонента TodoApp

   ; • Создать базовую структуру компонента TodoApp. 

   ; • Импортировать компоненты TodoList и TodoForm. 


   • В TodoApp создать состояние для хранения задач в виде массива объектов. Каждый объект должен содержать:

     • id (уникальный идентификатор) 

     • text (текст задачи) 

     • completed (логическое значение, указывающее, выполнена задача или нет) 





4. Создание компонента TodoForm

   ; • Создать форму для ввода текста новой задачи.

   ; • Добавить кнопку "Добавить", которая будет добавлять новую задачу в список.

   • Обработать событие отправки формы, чтобы добавлять новую задачу в состояние родительского компонента (TodoApp).






5. Создание компонента TodoList

   • Получить список задач из состояния TodoApp.

   • Передать список задач в компонент TodoList.

   • Внутри TodoList отобразить каждую задачу с помощью компонента TodoItem.

6. Создание компонента TodoItem

   • Отобразить текст задачи и кнопку "Удалить". 

   • Добавить обработчик события для удаления задачи из списка.

   • Добавить возможность отмечать задачу как выполненную (например, при клике на текст задачи). 


▎Рекомендации

• Используйте хуки (useState, useEffect) для управления состоянием и побочными эффектами.

• Разбивайте код на небольшие компоненты для лучшей читабельности и переиспользуемости.

• Следите за чистотой кода и используйте комментарии для пояснения сложных участков.